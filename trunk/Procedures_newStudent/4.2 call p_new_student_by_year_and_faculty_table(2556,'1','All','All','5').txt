CREATE PROCEDURE p_new_student_by_year_and_faculty_table (IN paramYEAR INTEGER,IN paramSEMESTER VARCHAR(256),IN paramFOREIGN VARCHAR(256),IN paramEDU VARCHAR(256),IN paramYEARSUB VARCHAR(256)) 
DYNAMIC RESULT SETS 1 
LANGUAGE SQL 
BEGIN 
     DECLARE result_set_1 CURSOR WITH RETURN TO CLIENT FOR
		SELECT case when FACULTY_NAME_INITIAL = 'KMUTT' then 'อื่นๆ' else FACULTY_NAME_INITIAL end as FACULTY_NAME_INITIAL
		,ACTUAL_NEW_STUDENT_3
		,ACTUAL_NEW_STUDENT_4
		,ACTUAL_NEW_STUDENT_5
		,ACTUAL_NEW_STUDENT_3 + ACTUAL_NEW_STUDENT_4 + ACTUAL_NEW_STUDENT_5 as Total
		,FACULTY_CODE
		FROM(
		SELECT QRY.FACULTY_CODE
        ,QRY.FACULTY_NAME_INITIAL
        ,coalesce(sum(QRY.NO_OF_ACTUAL_NEW_STUDENT_3),0) as ACTUAL_NEW_STUDENT_3
        ,coalesce(sum(QRY.NO_OF_ACTUAL_NEW_STUDENT_4),0) as ACTUAL_NEW_STUDENT_4
        ,coalesce(sum(QRY.NO_OF_ACTUAL_NEW_STUDENT_5),0) as ACTUAL_NEW_STUDENT_5
		FROM(
		SELECT DIM_FACULTY.FACULTY_CODE
		   ,DIM_FACULTY.FACULTY_NAME_INITIAL
		   ,CASE
			  WHEN DIM_SEMESTER.ACADEMIC_YEAR = (paramYEAR)-4 THEN sum(FACT_ACTUAL_PLAN.NO_OF_ACTUAL_NEW_STUDENT) 
		   END as NO_OF_ACTUAL_NEW_STUDENT_1
		   ,CASE
			  WHEN DIM_SEMESTER.ACADEMIC_YEAR = (paramYEAR)-3 THEN sum(FACT_ACTUAL_PLAN.NO_OF_ACTUAL_NEW_STUDENT) 
		   END as NO_OF_ACTUAL_NEW_STUDENT_2
		  ,CASE
			  WHEN DIM_SEMESTER.ACADEMIC_YEAR = (paramYEAR)-2 THEN sum(FACT_ACTUAL_PLAN.NO_OF_ACTUAL_NEW_STUDENT) 
		   END as NO_OF_ACTUAL_NEW_STUDENT_3
		   ,CASE
			  WHEN DIM_SEMESTER.ACADEMIC_YEAR = (paramYEAR)-1 THEN sum(FACT_ACTUAL_PLAN.NO_OF_ACTUAL_NEW_STUDENT) 
		   END as NO_OF_ACTUAL_NEW_STUDENT_4
		   ,CASE 
			  WHEN DIM_SEMESTER.ACADEMIC_YEAR = (paramYEAR) THEN sum(FACT_ACTUAL_PLAN.NO_OF_ACTUAL_NEW_STUDENT) 
		   END as NO_OF_ACTUAL_NEW_STUDENT_5
		  
		FROM FACT_ACTUAL_PLAN
		left join DIM_SEMESTER on DIM_SEMESTER.SEMESTER_KEY = FACT_ACTUAL_PLAN.SEMESTER_KEY
		left join DIM_EDUCATION_LEVEL on DIM_EDUCATION_LEVEL.EDUCATION_LEVEL_KEY = FACT_ACTUAL_PLAN.EDUCATION_LEVEL_KEY
		left join DIM_FIELD on DIM_FIELD.FIELD_KEY = FACT_ACTUAL_PLAN.FIELD_KEY
		left join DIM_FOREIGN_FLAG on DIM_FOREIGN_FLAG.FOREIGN_FLAG_KEY = FACT_ACTUAL_PLAN.FOREIGN_FLAG_KEY
		left join DIM_FACULTY on DIM_FACULTY.FACULTY_CODE = DIM_FIELD.FACULTY_CODE
		where (DIM_SEMESTER.ACADEMIC_YEAR between (paramYEAR)-(paramYEARSUB)+(1) and (paramYEAR))
		and (DIM_SEMESTER.SEMESTER_CODE in (paramSEMESTER) or 'All' in (paramSEMESTER))
		and (DIM_FOREIGN_FLAG.FOREIGN_FLAG in (paramFOREIGN) or 'All' in (paramFOREIGN))
		and (DIM_EDUCATION_LEVEL.EDUCATION_LEVEL_CODE in (paramEDU) or 'All' in (paramEDU))
		group by DIM_SEMESTER.ACADEMIC_YEAR
		,DIM_FACULTY.FACULTY_CODE
		,DIM_FACULTY.FACULTY_NAME_INITIAL
		)qry
		group by QRY.FACULTY_CODE
		,QRY.FACULTY_NAME_INITIAL
		)gry1
		order by FACULTY_CODE;
		
	DECLARE result_set_2 CURSOR WITH RETURN TO CLIENT FOR
	 	SELECT FACULTY_NAME_INITIAL
		,ACTUAL_NEW_STUDENT_2
		,ACTUAL_NEW_STUDENT_3
		,ACTUAL_NEW_STUDENT_4
		,ACTUAL_NEW_STUDENT_5
		,ACTUAL_NEW_STUDENT_2 + ACTUAL_NEW_STUDENT_3 + ACTUAL_NEW_STUDENT_4 + ACTUAL_NEW_STUDENT_5 as Total
		,FACULTY_CODE
		FROM(
        SELECT QRY.FACULTY_CODE
        ,QRY.FACULTY_NAME_INITIAL
        ,coalesce(sum(QRY.NO_OF_ACTUAL_NEW_STUDENT_1),0) as ACTUAL_NEW_STUDENT_1
        ,coalesce(sum(QRY.NO_OF_ACTUAL_NEW_STUDENT_2),0) as ACTUAL_NEW_STUDENT_2
        ,coalesce(sum(QRY.NO_OF_ACTUAL_NEW_STUDENT_3),0) as ACTUAL_NEW_STUDENT_3
        ,coalesce(sum(QRY.NO_OF_ACTUAL_NEW_STUDENT_4),0) as ACTUAL_NEW_STUDENT_4
        ,coalesce(sum(QRY.NO_OF_ACTUAL_NEW_STUDENT_5),0) as ACTUAL_NEW_STUDENT_5
		FROM(
		SELECT DIM_FACULTY.FACULTY_CODE
		   ,DIM_FACULTY.FACULTY_NAME_INITIAL
		   ,CASE
			  WHEN DIM_SEMESTER.ACADEMIC_YEAR = (paramYEAR)-4 THEN sum(FACT_ACTUAL_PLAN.NO_OF_ACTUAL_NEW_STUDENT) 
		   END as NO_OF_ACTUAL_NEW_STUDENT_1
		   ,CASE
			  WHEN DIM_SEMESTER.ACADEMIC_YEAR = (paramYEAR)-3 THEN sum(FACT_ACTUAL_PLAN.NO_OF_ACTUAL_NEW_STUDENT) 
		   END as NO_OF_ACTUAL_NEW_STUDENT_2
		  ,CASE
			  WHEN DIM_SEMESTER.ACADEMIC_YEAR = (paramYEAR)-2 THEN sum(FACT_ACTUAL_PLAN.NO_OF_ACTUAL_NEW_STUDENT) 
		   END as NO_OF_ACTUAL_NEW_STUDENT_3
		   ,CASE
			  WHEN DIM_SEMESTER.ACADEMIC_YEAR = (paramYEAR)-1 THEN sum(FACT_ACTUAL_PLAN.NO_OF_ACTUAL_NEW_STUDENT) 
		   END as NO_OF_ACTUAL_NEW_STUDENT_4
		   ,CASE 
			  WHEN DIM_SEMESTER.ACADEMIC_YEAR = (paramYEAR) THEN sum(FACT_ACTUAL_PLAN.NO_OF_ACTUAL_NEW_STUDENT) 
		   END as NO_OF_ACTUAL_NEW_STUDENT_5
		  
		FROM FACT_ACTUAL_PLAN
		left join DIM_SEMESTER on DIM_SEMESTER.SEMESTER_KEY = FACT_ACTUAL_PLAN.SEMESTER_KEY
		left join DIM_EDUCATION_LEVEL on DIM_EDUCATION_LEVEL.EDUCATION_LEVEL_KEY = FACT_ACTUAL_PLAN.EDUCATION_LEVEL_KEY
		left join DIM_FIELD on DIM_FIELD.FIELD_KEY = FACT_ACTUAL_PLAN.FIELD_KEY
		left join DIM_FOREIGN_FLAG on DIM_FOREIGN_FLAG.FOREIGN_FLAG_KEY = FACT_ACTUAL_PLAN.FOREIGN_FLAG_KEY
		left join DIM_FACULTY on DIM_FACULTY.FACULTY_CODE = DIM_FIELD.FACULTY_CODE
		where (DIM_SEMESTER.ACADEMIC_YEAR between (paramYEAR)-(paramYEARSUB)+(1) and (paramYEAR))
		and (DIM_SEMESTER.SEMESTER_CODE in (paramSEMESTER) or 'All' in (paramSEMESTER))
		and (DIM_FOREIGN_FLAG.FOREIGN_FLAG in (paramFOREIGN) or 'All' in (paramFOREIGN))
		and (DIM_EDUCATION_LEVEL.EDUCATION_LEVEL_CODE in (paramEDU) or 'All' in (paramEDU))
		group by DIM_SEMESTER.ACADEMIC_YEAR
		,DIM_FACULTY.FACULTY_CODE
		,DIM_FACULTY.FACULTY_NAME_INITIAL
		)qry
		group by QRY.FACULTY_CODE
		,QRY.FACULTY_NAME_INITIAL
		)gry1
		order by FACULTY_CODE;
		
     DECLARE result_set_3 CURSOR WITH RETURN TO CLIENT FOR
	 	SELECT FACULTY_NAME_INITIAL
		,ACTUAL_NEW_STUDENT_1
		,ACTUAL_NEW_STUDENT_2
		,ACTUAL_NEW_STUDENT_3
		,ACTUAL_NEW_STUDENT_4
		,ACTUAL_NEW_STUDENT_5
		,ACTUAL_NEW_STUDENT_1 + ACTUAL_NEW_STUDENT_2 + ACTUAL_NEW_STUDENT_3 + ACTUAL_NEW_STUDENT_4 + ACTUAL_NEW_STUDENT_5 as Total
		,FACULTY_CODE
		FROM(
        SELECT QRY.FACULTY_CODE
        ,QRY.FACULTY_NAME_INITIAL
        ,coalesce(sum(QRY.NO_OF_ACTUAL_NEW_STUDENT_1),0) as ACTUAL_NEW_STUDENT_1
        ,coalesce(sum(QRY.NO_OF_ACTUAL_NEW_STUDENT_2),0) as ACTUAL_NEW_STUDENT_2
        ,coalesce(sum(QRY.NO_OF_ACTUAL_NEW_STUDENT_3),0) as ACTUAL_NEW_STUDENT_3
        ,coalesce(sum(QRY.NO_OF_ACTUAL_NEW_STUDENT_4),0) as ACTUAL_NEW_STUDENT_4
        ,coalesce(sum(QRY.NO_OF_ACTUAL_NEW_STUDENT_5),0) as ACTUAL_NEW_STUDENT_5
		FROM(
		SELECT DIM_FACULTY.FACULTY_CODE
		   ,DIM_FACULTY.FACULTY_NAME_INITIAL
		   ,CASE
			  WHEN DIM_SEMESTER.ACADEMIC_YEAR = (paramYEAR)-4 THEN sum(FACT_ACTUAL_PLAN.NO_OF_ACTUAL_NEW_STUDENT) 
		   END as NO_OF_ACTUAL_NEW_STUDENT_1
		   ,CASE
			  WHEN DIM_SEMESTER.ACADEMIC_YEAR = (paramYEAR)-3 THEN sum(FACT_ACTUAL_PLAN.NO_OF_ACTUAL_NEW_STUDENT) 
		   END as NO_OF_ACTUAL_NEW_STUDENT_2
		  ,CASE
			  WHEN DIM_SEMESTER.ACADEMIC_YEAR = (paramYEAR)-2 THEN sum(FACT_ACTUAL_PLAN.NO_OF_ACTUAL_NEW_STUDENT) 
		   END as NO_OF_ACTUAL_NEW_STUDENT_3
		   ,CASE
			  WHEN DIM_SEMESTER.ACADEMIC_YEAR = (paramYEAR)-1 THEN sum(FACT_ACTUAL_PLAN.NO_OF_ACTUAL_NEW_STUDENT) 
		   END as NO_OF_ACTUAL_NEW_STUDENT_4
		   ,CASE 
			  WHEN DIM_SEMESTER.ACADEMIC_YEAR = (paramYEAR) THEN sum(FACT_ACTUAL_PLAN.NO_OF_ACTUAL_NEW_STUDENT) 
		   END as NO_OF_ACTUAL_NEW_STUDENT_5
		  
		FROM FACT_ACTUAL_PLAN
		left join DIM_SEMESTER on DIM_SEMESTER.SEMESTER_KEY = FACT_ACTUAL_PLAN.SEMESTER_KEY
		left join DIM_EDUCATION_LEVEL on DIM_EDUCATION_LEVEL.EDUCATION_LEVEL_KEY = FACT_ACTUAL_PLAN.EDUCATION_LEVEL_KEY
		left join DIM_FIELD on DIM_FIELD.FIELD_KEY = FACT_ACTUAL_PLAN.FIELD_KEY
		left join DIM_FOREIGN_FLAG on DIM_FOREIGN_FLAG.FOREIGN_FLAG_KEY = FACT_ACTUAL_PLAN.FOREIGN_FLAG_KEY
		left join DIM_FACULTY on DIM_FACULTY.FACULTY_CODE = DIM_FIELD.FACULTY_CODE
		where (DIM_SEMESTER.ACADEMIC_YEAR between (paramYEAR)-(paramYEARSUB)+(1) and (paramYEAR))
		and (DIM_SEMESTER.SEMESTER_CODE in (paramSEMESTER) or 'All' in (paramSEMESTER))
		and (DIM_FOREIGN_FLAG.FOREIGN_FLAG in (paramFOREIGN) or 'All' in (paramFOREIGN))
		and (DIM_EDUCATION_LEVEL.EDUCATION_LEVEL_CODE in (paramEDU) or 'All' in (paramEDU))
		group by DIM_SEMESTER.ACADEMIC_YEAR
		,DIM_FACULTY.FACULTY_CODE
		,DIM_FACULTY.FACULTY_NAME_INITIAL
		)qry
		group by QRY.FACULTY_CODE
		,QRY.FACULTY_NAME_INITIAL
		)gry1
		order by FACULTY_CODE;
		
     IF (paramYEARSUB) = 3 THEN
        OPEN  result_set_1;
     ELSEIF(paramYEARSUB) = 4 THEN
        OPEN  result_set_2;
     ELSE
        OPEN  result_set_3;
     END IF;
END